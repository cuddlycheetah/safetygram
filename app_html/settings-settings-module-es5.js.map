{"version":3,"sources":["./src/app/settings/settings.page.html","./src/app/settings/settings.module.ts","./src/app/settings/settings.page.scss","./src/app/settings/settings.page.ts"],"names":[],"mappings":"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","file":"settings-settings-module-es5.js","sourcesContent":["module.exports = \"<mat-toolbar-row>\\n  <button [hidden]=\\\"!menuService.mobileQuery.matches\\\" mat-icon-button (click)=\\\"menuService.toggle()\\\">\\n    <mat-icon>menu</mat-icon>\\n  </button>\\n  <h2 translate>settings.title</h2>\\n</mat-toolbar-row>\\n\\n<ion-content>\\n  <pre>Database Size: {{ dbStats.fsSize }} MB</pre>\\n  <form [formGroup]=\\\"changePasswordGroup\\\">\\n    <p>\\n      <mat-form-field>\\n        <input matInput [placeholder]=\\\"'auth.password' | translate\\\" formControlName=\\\"password\\\" required>\\n      </mat-form-field>\\n    </p>\\n    <p>\\n      <mat-form-field>\\n        <input matInput [placeholder]=\\\"'auth.password2' | translate\\\" formControlName=\\\"confirm_password\\\" required>\\n      </mat-form-field>\\n    </p>\\n    <div>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"changePW()\\\" [disabled]=\\\"changePasswordGroup.invalid\\\">{{ 'auth.change_password' | translate }}</button>\\n    </div>\\n  </form>\\n  <form [formGroup]=\\\"changeBotTokenGroup\\\">\\n    <p>\\n      <mat-form-field>\\n        <input matInput [placeholder]=\\\"'settings.botToken' | translate\\\" formControlName=\\\"botToken\\\" required>\\n      </mat-form-field>\\n    </p>\\n    <div>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"changeBT()\\\" [disabled]=\\\"changeBotTokenGroup.invalid\\\">{{ 'settings.botTokenChange' | translate }}</button>\\n    </div>\\n  </form>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPage } from './settings.page';\nimport { MaterialModule } from '../material.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    MaterialModule\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { MenuService } from '../menu.service';\nimport { FormBuilder, Validators, FormGroup, AbstractControl } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { AlertController, LoadingController } from '@ionic/angular';\nimport { HttpClient } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nfunction passwordConfirming(c: AbstractControl): any {\n  if (!c.parent || !c) { return;}\n  const pwd = c.parent.get('password');\n  const cpwd = c.parent.get('confirm_password');\n\n  if (!pwd || !cpwd) { return; }\n  if (pwd.value !== cpwd.value) {\n      return { invalid: true };\n  }\n}\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\n\nexport class SettingsPage implements OnInit {\n\n  changePasswordGroup: FormGroup;\n  changeBotTokenGroup: FormGroup;\n\n  public dbStats = { fsSize: -1, };\n\n  constructor(\n    public authService: AuthService,\n    public menuService: MenuService,\n    public formBuilder: FormBuilder,\n    private http: HttpClient,\n    private loadingCtrl: LoadingController,\n    private alertCtrl: AlertController,\n    private translate: TranslateService\n  ) {\n    this.changePasswordGroup = this.formBuilder.group({\n      password: [null, Validators.required],\n      confirm_password: [null, [Validators.required, passwordConfirming]]\n    });\n    this.changeBotTokenGroup = this.formBuilder.group({\n      botToken: [null, Validators.required],\n    });\n  }\n\n  async ngOnInit() {\n    const loading = await this.loadingCtrl.create({\n      message: this.translate.instant('settings.bottoken.load'),\n      translucent: true,\n    });\n    await loading.present();\n    // STANDARD\n    this.http.get(`/api/interface/bottoken`)\n    .pipe(\n      finalize(() => loading.dismiss())\n    )\n    .subscribe(async (res: any) => {\n      this.changeBotTokenGroup.setValue({ botToken: res });\n    });\n\n    // DB STATS\n    this.http.get(`/api/v2/stats/db`)\n    .subscribe(async (res: any) => {\n      this.dbStats = res;\n    });\n  }\n\n  async changePW() {\n    const password = this.changePasswordGroup.value.password;\n    await this.authService.initPassword(password);\n  }\n  async changeBT() {\n    const botToken = this.changeBotTokenGroup.value.botToken;\n    const loading = await this.loadingCtrl.create({\n      message: this.translate.instant('settings.bottoken.set'),\n      translucent: true,\n    });\n    await loading.present();\n    // STANDARD\n    return this.http.post(`/api/interface/bottoken`, {\n      botToken,\n    })\n    .pipe(\n      finalize(() => loading.dismiss())\n    )\n    .subscribe(\n      async (res: any) => {\n        const alert = await this.alertCtrl.create({\n          header: this.translate.instant('settings.bottoken.success.alert.title'),\n          message: undefined,\n          buttons: ['OK'],\n        });\n        alert.present();\n      }, async (err) => { // if the request fails, its propably because the server restarted\n        const alert = await this.alertCtrl.create({\n          header: this.translate.instant('settings.bottoken.success.alert.title'),\n          buttons: ['OK'],\n        });\n        alert.present();\n    });\n  }\n\n}\n"],"sourceRoot":""}